{"Classes/ObjcLDDictionaryChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDDictionaryChangedFlag(py)oldValue":{"name":"oldValue","abstract":"<p>The changed flag&rsquo;s value before it changed</p>","parent_name":"ObjcLDDictionaryChangedFlag"},"Classes/ObjcLDDictionaryChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDDictionaryChangedFlag(py)newValue":{"name":"newValue","abstract":"<p>The changed flag&rsquo;s value after it changed</p>","parent_name":"ObjcLDDictionaryChangedFlag"},"Classes/ObjcLDDictionaryChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDDictionaryChangedFlag(py)oldValueSource":{"name":"oldValueSource","abstract":"<p>The changed flag value&rsquo;s source before it changed</p>","parent_name":"ObjcLDDictionaryChangedFlag"},"Classes/ObjcLDDictionaryChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDDictionaryChangedFlag(py)newValueSource":{"name":"newValueSource","abstract":"<p>The changed flag value&rsquo;s source after it changed</p>","parent_name":"ObjcLDDictionaryChangedFlag"},"Classes/ObjcLDArrayChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDArrayChangedFlag(py)oldValue":{"name":"oldValue","abstract":"<p>The changed flag&rsquo;s value before it changed</p>","parent_name":"ObjcLDArrayChangedFlag"},"Classes/ObjcLDArrayChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDArrayChangedFlag(py)newValue":{"name":"newValue","abstract":"<p>The changed flag&rsquo;s value after it changed</p>","parent_name":"ObjcLDArrayChangedFlag"},"Classes/ObjcLDArrayChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDArrayChangedFlag(py)oldValueSource":{"name":"oldValueSource","abstract":"<p>The changed flag value&rsquo;s source before it changed</p>","parent_name":"ObjcLDArrayChangedFlag"},"Classes/ObjcLDArrayChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDArrayChangedFlag(py)newValueSource":{"name":"newValueSource","abstract":"<p>The changed flag value&rsquo;s source after it changed</p>","parent_name":"ObjcLDArrayChangedFlag"},"Classes/ObjcLDStringChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDStringChangedFlag(py)oldValue":{"name":"oldValue","abstract":"<p>The changed flag&rsquo;s value before it changed</p>","parent_name":"ObjcLDStringChangedFlag"},"Classes/ObjcLDStringChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDStringChangedFlag(py)newValue":{"name":"newValue","abstract":"<p>The changed flag&rsquo;s value after it changed</p>","parent_name":"ObjcLDStringChangedFlag"},"Classes/ObjcLDStringChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDStringChangedFlag(py)oldValueSource":{"name":"oldValueSource","abstract":"<p>The changed flag value&rsquo;s source before it changed</p>","parent_name":"ObjcLDStringChangedFlag"},"Classes/ObjcLDStringChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDStringChangedFlag(py)newValueSource":{"name":"newValueSource","abstract":"<p>The changed flag value&rsquo;s source after it changed</p>","parent_name":"ObjcLDStringChangedFlag"},"Classes/ObjcLDDoubleChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDDoubleChangedFlag(py)oldValue":{"name":"oldValue","abstract":"<p>The changed flag&rsquo;s value before it changed</p>","parent_name":"ObjcLDDoubleChangedFlag"},"Classes/ObjcLDDoubleChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDDoubleChangedFlag(py)newValue":{"name":"newValue","abstract":"<p>The changed flag&rsquo;s value after it changed</p>","parent_name":"ObjcLDDoubleChangedFlag"},"Classes/ObjcLDDoubleChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDDoubleChangedFlag(py)oldValueSource":{"name":"oldValueSource","abstract":"<p>The changed flag value&rsquo;s source before it changed</p>","parent_name":"ObjcLDDoubleChangedFlag"},"Classes/ObjcLDDoubleChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDDoubleChangedFlag(py)newValueSource":{"name":"newValueSource","abstract":"<p>The changed flag value&rsquo;s source after it changed</p>","parent_name":"ObjcLDDoubleChangedFlag"},"Classes/ObjcLDIntegerChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDIntegerChangedFlag(py)oldValue":{"name":"oldValue","abstract":"<p>The changed flag&rsquo;s value before it changed</p>","parent_name":"ObjcLDIntegerChangedFlag"},"Classes/ObjcLDIntegerChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDIntegerChangedFlag(py)newValue":{"name":"newValue","abstract":"<p>The changed flag&rsquo;s value after it changed</p>","parent_name":"ObjcLDIntegerChangedFlag"},"Classes/ObjcLDIntegerChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDIntegerChangedFlag(py)oldValueSource":{"name":"oldValueSource","abstract":"<p>The changed flag value&rsquo;s source before it changed</p>","parent_name":"ObjcLDIntegerChangedFlag"},"Classes/ObjcLDIntegerChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDIntegerChangedFlag(py)newValueSource":{"name":"newValueSource","abstract":"<p>The changed flag value&rsquo;s source after it changed</p>","parent_name":"ObjcLDIntegerChangedFlag"},"Classes/ObjcLDBoolChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDBoolChangedFlag(py)oldValue":{"name":"oldValue","abstract":"<p>The changed flag&rsquo;s value before it changed</p>","parent_name":"ObjcLDBoolChangedFlag"},"Classes/ObjcLDBoolChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDBoolChangedFlag(py)newValue":{"name":"newValue","abstract":"<p>The changed flag&rsquo;s value after it changed</p>","parent_name":"ObjcLDBoolChangedFlag"},"Classes/ObjcLDBoolChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDBoolChangedFlag(py)oldValueSource":{"name":"oldValueSource","abstract":"<p>The changed flag value&rsquo;s source before it changed</p>","parent_name":"ObjcLDBoolChangedFlag"},"Classes/ObjcLDBoolChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDBoolChangedFlag(py)newValueSource":{"name":"newValueSource","abstract":"<p>The changed flag value&rsquo;s source after it changed</p>","parent_name":"ObjcLDBoolChangedFlag"},"Classes/ObjcLDChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDChangedFlag(cpy)nilSource":{"name":"nilSource","abstract":"<p>String that identifies the feature flag value&rsquo;s source is nil</p>","parent_name":"ObjcLDChangedFlag"},"Classes/ObjcLDChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDChangedFlag(cpy)typeMismatch":{"name":"typeMismatch","abstract":"<p>String that identifies the feature flag value&rsquo;s type does not match the requested type</p>","parent_name":"ObjcLDChangedFlag"},"Classes/ObjcLDChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDChangedFlag(py)key":{"name":"key","abstract":"<p>The changed feature flag&rsquo;s key</p>","parent_name":"ObjcLDChangedFlag"},"Classes/ObjcLDChangedFlag.html":{"name":"ObjcLDChangedFlag","abstract":"<p>Collects the elements of a feature flag that changed as a result of a <code>clientstream</code> update or feature flag request. The SDK will pass a typed ObjcLDChangedFlag or a collection of ObjcLDChangedFlags into feature flag observer blocks. This is the base type for the typed ObjcLDChangedFlags passed into observer blocks. The client app will have to convert the ObjcLDChangedFlag into the expected typed ObjcLDChangedFlag type.</p>"},"Classes/ObjcLDBoolChangedFlag.html":{"name":"ObjcLDBoolChangedFlag","abstract":"<p>Wraps the changed feature flag&rsquo;s BOOL values and sources.</p>"},"Classes/ObjcLDIntegerChangedFlag.html":{"name":"ObjcLDIntegerChangedFlag","abstract":"<p>Wraps the changed feature flag&rsquo;s NSInteger values and sources.</p>"},"Classes/ObjcLDDoubleChangedFlag.html":{"name":"ObjcLDDoubleChangedFlag","abstract":"<p>Wraps the changed feature flag&rsquo;s double values and sources.</p>"},"Classes/ObjcLDStringChangedFlag.html":{"name":"ObjcLDStringChangedFlag","abstract":"<p>Wraps the changed feature flag&rsquo;s NSString values and sources.</p>"},"Classes/ObjcLDArrayChangedFlag.html":{"name":"ObjcLDArrayChangedFlag","abstract":"<p>Wraps the changed feature flag&rsquo;s NSArray values and sources.</p>"},"Classes/ObjcLDDictionaryChangedFlag.html":{"name":"ObjcLDDictionaryChangedFlag","abstract":"<p>Wraps the changed feature flag&rsquo;s NSDictionary values and sources.</p>"},"Classes/ObjcLDDictionaryVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDDictionaryVariationValue(py)value":{"name":"value","abstract":"<p>The feature flag&rsquo;s NSDictionary value</p>","parent_name":"ObjcLDDictionaryVariationValue"},"Classes/ObjcLDDictionaryVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDDictionaryVariationValue(py)source":{"name":"source","abstract":"<p>The feature flag value&rsquo;s source</p>","parent_name":"ObjcLDDictionaryVariationValue"},"Classes/ObjcLDDictionaryVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDDictionaryVariationValue(py)sourceString":{"name":"sourceString","abstract":"<p>A string representation of the feature flag value&rsquo;s source</p>","parent_name":"ObjcLDDictionaryVariationValue"},"Classes/ObjcLDArrayVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDArrayVariationValue(py)value":{"name":"value","abstract":"<p>The feature flag&rsquo;s NSArray value</p>","parent_name":"ObjcLDArrayVariationValue"},"Classes/ObjcLDArrayVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDArrayVariationValue(py)source":{"name":"source","abstract":"<p>The feature flag value&rsquo;s source</p>","parent_name":"ObjcLDArrayVariationValue"},"Classes/ObjcLDArrayVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDArrayVariationValue(py)sourceString":{"name":"sourceString","abstract":"<p>A string representation of the feature flag value&rsquo;s source</p>","parent_name":"ObjcLDArrayVariationValue"},"Classes/ObjcLDStringVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDStringVariationValue(py)value":{"name":"value","abstract":"<p>The feature flag&rsquo;s NSString value</p>","parent_name":"ObjcLDStringVariationValue"},"Classes/ObjcLDStringVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDStringVariationValue(py)source":{"name":"source","abstract":"<p>The feature flag value&rsquo;s source</p>","parent_name":"ObjcLDStringVariationValue"},"Classes/ObjcLDStringVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDStringVariationValue(py)sourceString":{"name":"sourceString","abstract":"<p>A string representation of the feature flag value&rsquo;s source</p>","parent_name":"ObjcLDStringVariationValue"},"Classes/ObjcLDDoubleVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDDoubleVariationValue(py)value":{"name":"value","abstract":"<p>The feature flag&rsquo;s double value</p>","parent_name":"ObjcLDDoubleVariationValue"},"Classes/ObjcLDDoubleVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDDoubleVariationValue(py)source":{"name":"source","abstract":"<p>The feature flag value&rsquo;s source</p>","parent_name":"ObjcLDDoubleVariationValue"},"Classes/ObjcLDDoubleVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDDoubleVariationValue(py)sourceString":{"name":"sourceString","abstract":"<p>A string representation of the feature flag value&rsquo;s source</p>","parent_name":"ObjcLDDoubleVariationValue"},"Classes/ObjcLDIntegerVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDIntegerVariationValue(py)value":{"name":"value","abstract":"<p>The feature flag&rsquo;s NSInteger value</p>","parent_name":"ObjcLDIntegerVariationValue"},"Classes/ObjcLDIntegerVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDIntegerVariationValue(py)source":{"name":"source","abstract":"<p>The feature flag value&rsquo;s source</p>","parent_name":"ObjcLDIntegerVariationValue"},"Classes/ObjcLDIntegerVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDIntegerVariationValue(py)sourceString":{"name":"sourceString","abstract":"<p>A string representation of the feature flag value&rsquo;s source</p>","parent_name":"ObjcLDIntegerVariationValue"},"Classes/ObjcLDBoolVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDBoolVariationValue(py)value":{"name":"value","abstract":"<p>The feature flag&rsquo;s BOOL value</p>","parent_name":"ObjcLDBoolVariationValue"},"Classes/ObjcLDBoolVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDBoolVariationValue(py)source":{"name":"source","abstract":"<p>The feature flag value&rsquo;s source</p>","parent_name":"ObjcLDBoolVariationValue"},"Classes/ObjcLDBoolVariationValue.html#/c:@M@LaunchDarkly@objc(cs)LDBoolVariationValue(py)sourceString":{"name":"sourceString","abstract":"<p>A string representation of the feature flag value&rsquo;s source</p>","parent_name":"ObjcLDBoolVariationValue"},"Classes/ObjcLDBoolVariationValue.html":{"name":"ObjcLDBoolVariationValue","abstract":"<p>Objective-C object that contains a BOOL feature flag&rsquo;s value and source</p>"},"Classes/ObjcLDIntegerVariationValue.html":{"name":"ObjcLDIntegerVariationValue","abstract":"<p>Objective-C object that contains a NSInteger feature flag&rsquo;s value and source</p>"},"Classes/ObjcLDDoubleVariationValue.html":{"name":"ObjcLDDoubleVariationValue","abstract":"<p>Objective-C object that contains a double feature flag&rsquo;s value and source</p>"},"Classes/ObjcLDStringVariationValue.html":{"name":"ObjcLDStringVariationValue","abstract":"<p>Objective-C object that contains a NSString feature flag&rsquo;s value and source</p>"},"Classes/ObjcLDArrayVariationValue.html":{"name":"ObjcLDArrayVariationValue","abstract":"<p>Objective-C object that contains a NSArray feature flag&rsquo;s value and source</p>"},"Classes/ObjcLDDictionaryVariationValue.html":{"name":"ObjcLDDictionaryVariationValue","abstract":"<p>Objective-C object that contains a NSDictionary feature flag&rsquo;s value and source</p>"},"Extensions/NSString.html#/c:@CM@LaunchDarkly@@objc(cs)NSString(cm)stringWithFlagValueSource:":{"name":"stringWithFlagValueSource(_:)","abstract":"<p>String representation of an ObjcLDFlagValueSource</p>","parent_name":"NSString"},"Enums/ObjcLDFlagValueSource.html#/c:@M@LaunchDarkly@E@LDFlagValueSource@LDFlagValueSourceNilSource":{"name":"nilSource","abstract":"<p>ObjcLDFlagValueSourceNilSource indicates the feature flag value&rsquo;s source is not available (Objective-C only)</p>","parent_name":"ObjcLDFlagValueSource"},"Enums/ObjcLDFlagValueSource.html#/c:@M@LaunchDarkly@E@LDFlagValueSource@LDFlagValueSourceServer":{"name":"server","abstract":"<p>ObjcLDFlagValueSourceServer indicates the \u0010feature flag value&rsquo;s source is the LaunchDarkly server</p>","parent_name":"ObjcLDFlagValueSource"},"Enums/ObjcLDFlagValueSource.html#/c:@M@LaunchDarkly@E@LDFlagValueSource@LDFlagValueSourceCache":{"name":"cache","abstract":"<p>ObjcLDFlagValueSourceCache indicates the \u0010feature flag value&rsquo;s source is the SDK&rsquo;s local cache</p>","parent_name":"ObjcLDFlagValueSource"},"Enums/ObjcLDFlagValueSource.html#/c:@M@LaunchDarkly@E@LDFlagValueSource@LDFlagValueSourceFallback":{"name":"fallback","abstract":"<p>ObjcLDFlagValueSourceFallback indicates the \u0010feature flag value&rsquo;s source is the fallback value provided by the client app</p>","parent_name":"ObjcLDFlagValueSource"},"Enums/ObjcLDFlagValueSource.html#/c:@M@LaunchDarkly@E@LDFlagValueSource@LDFlagValueSourceTypeMismatch":{"name":"typeMismatch","abstract":"<p>ObjcLDFlagValueSourceTypeMismatch indicates the type of feature flag requested differs from the actual feature flag type (Objective-C only)</p>","parent_name":"ObjcLDFlagValueSource"},"Classes/ObjcLDFlagValue.html#/c:@M@LaunchDarkly@objc(cs)LDFlagValue(py)flagValueType":{"name":"flagValueType","abstract":"<p>String representation of the type of the feature flag.</p>","parent_name":"ObjcLDFlagValue"},"Classes/ObjcLDFlagValue.html":{"name":"ObjcLDFlagValue","abstract":"<p>Defines the types and values of a feature flag. The SDK limits feature flags to these types by use of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbLD Protocols.html#/s:12LaunchDarkly22LDFlagValueConvertibleP\">LDFlagValueConvertible</a></code> protocol, which uses this type. Client app developers should not construct an LDFlagValue. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/LDFlagValue.html\">LDFlagValue</a></code> for the types of feature flags available.</p>"},"Enums/ObjcLDFlagValueSource.html":{"name":"ObjcLDFlagValueSource","abstract":"<p>Defines the possible sources for feature flag values."},"Extensions/NSString.html":{"name":"NSString"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)privatizableAttributes":{"name":"privatizableAttributes","abstract":"<p>LDUser attributes that can be marked private.</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeName":{"name":"attributeName","abstract":"<p>LDUser name attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)name\">name</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeFirstName":{"name":"attributeFirstName","abstract":"<p>LDUser firstName attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)firstName\">firstName</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeLastName":{"name":"attributeLastName","abstract":"<p>LDUser lastName attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)lastName\">lastName</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeCountry":{"name":"attributeCountry","abstract":"<p>LDUser country attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)country\">country</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeIPAddress":{"name":"attributeIPAddress","abstract":"<p>LDUser ipAddress attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)ipAddress\">ipAddress</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeEmail":{"name":"attributeEmail","abstract":"<p>LDUser email attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)email\">email</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeAvatar":{"name":"attributeAvatar","abstract":"<p>LDUser avatar attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)avatar\">avatar</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeCustom":{"name":"attributeCustom","abstract":"<p>LDUser custom attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)custom\">custom</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)key":{"name":"key","abstract":"<p>Client app defined string that uniquely identifies the user. If the client app does not define a key, the SDK will assign an identifier associated with the anonymous user. The key cannot be made private.</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)name":{"name":"name","abstract":"<p>Client app defined name for the user. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)firstName":{"name":"firstName","abstract":"<p>Client app defined first name for the user. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)lastName":{"name":"lastName","abstract":"<p>Client app defined last name for the user. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)country":{"name":"country","abstract":"<p>Client app defined country for the user. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)ipAddress":{"name":"ipAddress","abstract":"<p>Client app defined ipAddress for the user. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)email":{"name":"email","abstract":"<p>Client app defined email address for the user. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)avatar":{"name":"avatar","abstract":"<p>Client app defined avatar for the user. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)custom":{"name":"custom","abstract":"<p>Client app defined dictionary for the user. The client app may declare top level dictionary items as private. If the client app defines custom as private, the SDK considers the dictionary private except for device &amp; operatingSystem (which cannot be made private). See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)privateAttributes\">privateAttributes</a></code> for details. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)isAnonymous":{"name":"isAnonymous","abstract":"<p>Client app defined isAnonymous for the user. If the client app does not define isAnonymous, the SDK will use the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)key\">key</a></code> to set this attribute. isAnonymous cannot be made private. (Default: YES)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)device":{"name":"device","abstract":"<p>Client app defined device for the user. The SDK will determine the device automatically, however the client app can override the value. The SDK will insert the device into the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)custom\">custom</a></code> dictionary. The device cannot be made private. (Default: the system identified device)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)operatingSystem":{"name":"operatingSystem","abstract":"<p>Client app defined operatingSystem for the user. The SDK will determine the operatingSystem automatically, however the client app can override the value. The SDK will insert the operatingSystem into the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)custom\">custom</a></code> dictionary. The operatingSystem cannot be made private. (Default: the system identified operating system)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)privateAttributes":{"name":"privateAttributes","abstract":"<p>Client app defined privateAttributes for the user.</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(im)init":{"name":"init()","abstract":"<p>Initializer to create a LDUser. Client configurable attributes are set to their default value. The SDK will automatically set <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)key\">key</a></code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)device\">device</a></code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)operatingSystem\">operatingSystem</a></code>, and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)isAnonymous\">isAnonymous</a></code> attributes. The SDK embeds <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)device\">device</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)operatingSystem\">operatingSystem</a></code> into the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)custom\">custom</a></code> dictionary for transmission to LaunchDarkly.</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(im)initWithKey:":{"name":"init(key:)","abstract":"<p>Initializer to create a LDUser with a specific key. Other client configurable attributes are set to their default value. The SDK will automatically set <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)key\">key</a></code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)device\">device</a></code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)operatingSystem\">operatingSystem</a></code>, and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)isAnonymous\">isAnonymous</a></code> attributes. The SDK embeds <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)device\">device</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)operatingSystem\">operatingSystem</a></code> into the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)custom\">custom</a></code> dictionary for transmission to LaunchDarkly.</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(im)initWithObject:":{"name":"init(object:)","abstract":"<p>Failable Initializer that takes any object and attempts to create a LDUser from the object. If the object is a NSDictionary, constructs the LDUser via -[LDUser initWithUserDictionary:]</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/s:12LaunchDarkly10ObjcLDUserCACs10DictionaryVySSypG04userE0_tcfc":{"name":"init(userDictionary:)","abstract":"<p>Initializer that takes a NSDictionary and creates a LDUser from the contents. Uses any keys present to define corresponding attribute values. Initializes attributes not present in the dictionary to their default value. The initializer attempts to set <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)device\">device</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)operatingSystem\">operatingSystem</a></code> from corresponding values embedded in <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)custom\">custom</a></code>. The initializer attempts to set feature flags from values set in <code>config</code>.</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(im)isEqualWithObject:":{"name":"isEqual(object:)","abstract":"<p>Compares users by comparing their user keys only, to allow the client app to collect user information over time</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)baseUrl":{"name":"baseUrl","abstract":"<p>The url for making feature flag requests. Do not change unless instructed by LaunchDarkly.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)eventsUrl":{"name":"eventsUrl","abstract":"<p>The url for making event reports. Do not change unless instructed by LaunchDarkly.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)streamUrl":{"name":"streamUrl","abstract":"<p>The url for connecting to the <em>clientstream</em>. Do not change unless instructed by LaunchDarkly.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)eventCapacity":{"name":"eventCapacity","abstract":"<p>The maximum number of analytics events the LDClient can store. When the LDClient event store reaches the eventCapacity, the SDK discards events until it successfully reports them to LaunchDarkly. (Default: 100)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)connectionTimeoutMillis":{"name":"connectionTimeoutMillis","abstract":"<p>The timeout interval in milliseconds for flag requests and event reports. (Default: 10 seconds)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)eventFlushIntervalMillis":{"name":"eventFlushIntervalMillis","abstract":"<p>The interval between event reports in milliseconds (Default: 30 seconds)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)pollIntervalMillis":{"name":"pollIntervalMillis","abstract":"<p>The interval between feature flag requests in milliseconds. Used only for polling mode. (Default: 5 minutes)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)backgroundPollIntervalMillis":{"name":"backgroundPollIntervalMillis","abstract":"<p>The interval between feature flag requests while running in the background, in milliseconds. Used only for polling mode. (Default: 60 minutes)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)minPollingIntervalMillis":{"name":"minPollingIntervalMillis","abstract":"<p>The minimum interval between feature flag requests in milliseconds. Used only for polling mode. (5 minutes)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)minBackgroundPollIntervalMillis":{"name":"minBackgroundPollIntervalMillis","abstract":"<p>The minimum interval between feature flag requests while running in the background, in milliseconds. Used only for polling mode. (15 minutes)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)streamingMode":{"name":"streamingMode","abstract":"<p>Controls the method the SDK uses to keep feature flags updated. When set to .streaming, connects to <code>clientstream</code> which notifies the SDK of feature flag changes. When set to .polling, an efficient polling mechanism is used to periodically request feature flag values. Ignored for watchOS, which always uses .polling. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/LDStreamingMode.html\">LDStreamingMode</a></code> for more details. (Default: .streaming)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)enableBackgroundUpdates":{"name":"enableBackgroundUpdates","abstract":"<p>Enables feature flag updates when your app is in the background. Allowed on macOS only. (Default: NO)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)startOnline":{"name":"startOnline","abstract":"<p>Controls LDClient start behavior. When YES, calling start causes LDClient to go online. When NO, calling start causes LDClient to remain offline. If offline at start, set the client online to receive flag updates. (Default: YES)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)allUserAttributesPrivate":{"name":"allUserAttributesPrivate","abstract":"<p>Treat all user attributes as private for event reporting for all users.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)privateUserAttributes":{"name":"privateUserAttributes","abstract":"<p>User attributes and top level custom dictionary keys to treat as private for event reporting for all users.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)useReport":{"name":"useReport","abstract":"<p>Directs the SDK to use REPORT for HTTP requests to connect to <code>clientstream</code> and make feature flag requests. When NO the SDK uses GET for these requests. Do not use unless advised by LaunchDarkly. (Default: NO)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)inlineUserInEvents":{"name":"inlineUserInEvents","abstract":"<p>Controls how the SDK reports the user in analytics event reports. When set to YES, event reports will contain the user attributes, except attributes marked as private. When set to NO, event reports will contain the user&rsquo;s key only, reducing the size of event reports. (Default: NO)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)debugMode":{"name":"debugMode","abstract":"<p>Enables logging for debugging. (Default: NO)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(im)init":{"name":"init()","abstract":"<p>LDConfig constructor. Configurable values are all set to their default values. The client app can modify these values as desired. Note that client app developers may prefer to get the LDConfig from <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDClient.html#/s:12LaunchDarkly8LDClientC6configAA8LDConfigVv\">LDClient.config</a></code> (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(py)config\">ObjcLDClient.config</a></code>) in order to retain previously set values.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(im)isEqualWithObject:":{"name":"isEqual(object:)","abstract":"<p>Compares the settable properties in 2 LDConfig structs</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(cpy)sharedInstance":{"name":"sharedInstance","abstract":"<p>Access to the LDClient singleton. For iOS apps with watchOS companion apps, there will be a singleton on each platform. These singletons do not communicate with each other. If you try to share feature flags between apps, the latest flag values may be overwritten by old feature flags from the other platform. LaunchDarkly recommends not sharing feature flags between apps and allowing each LDClient to manage feature flags on its own platform. If you share feature flag data between apps, provide a way to prevent the LDClients from overwriting new feature flags with old feature flags in the shared data.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(py)isOnline":{"name":"isOnline","abstract":"<p>Reports the online/offline state of the LDClient.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)setOnline:":{"name":"setOnline(_:)","abstract":"<p>Set the LDClient online/offline.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)setOnline:completion:":{"name":"setOnline(_:completion:)","abstract":"<p>Set the LDClient online/offline.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(py)config":{"name":"config","abstract":"<p>The LDConfig that configures the LDClient. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDConfig.html\">LDConfig</a></code> (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDConfig.html\">ObjcLDConfig</a></code>) for details about what can be configured.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(py)user":{"name":"user","abstract":"<p>The LDUser set into the LDClient may affect the set of feature flags returned by the LaunchDarkly server, and ties event tracking to the user. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html\">LDUser</a></code> (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html\">ObjcLDUser</a></code>) for details about what information can be retained.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)startWithMobileKey:config:user:":{"name":"startWithMobileKey(_:config:user:)","abstract":"<p>Starts the LDClient using the passed in <code>mobileKey</code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(py)config\">config</a></code>, &amp; <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(py)user\">user</a></code>. Call this before requesting feature flag values. The LDClient will not go online until you call this method.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)startWithMobileKey:config:user:completion:":{"name":"startWithMobileKey(_:config:user:completion:)","abstract":"<p>Starts the LDClient using the passed in <code>mobileKey</code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(py)config\">config</a></code>, &amp; <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(py)user\">user</a></code>. Call this before requesting feature flag values. The LDClient will not go online until you call this method.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)stop":{"name":"stop()","abstract":"<p>Stops the LDClient. Stopping the client means the LDClient goes offline and stops recording events. LDClient will no longer provide feature flag values, only returning fallback values.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)boolVariationForKey:fallback:":{"name":"boolVariation(forKey:fallback:)","abstract":"<p>Returns the BOOL variation for the given feature flag. If the flag does not exist, cannot be cast to a BOOL, or the LDClient is not started, returns the fallback value.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)boolVariationAndSourceForKey:fallback:":{"name":"boolVariationAndSource(forKey:fallback:)","abstract":"<p>Returns the <code>LDBoolVariationValue</code> (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDBoolVariationValue.html\">ObjcLDBoolVariationValue</a></code>) containing the value and source for the given feature flag. If the flag does not exist, cannot be cast to a BOOL, or the LDClient is not started, returns the fallback value and <code>LDFlagValueSourceFallback</code> for the source.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)integerVariationForKey:fallback:":{"name":"integerVariation(forKey:fallback:)","abstract":"<p>Returns the NSInteger variation for the given feature flag. If the flag does not exist, cannot be cast to a NSInteger, or the LDClient is not started, returns the fallback value.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)integerVariationAndSourceForKey:fallback:":{"name":"integerVariationAndSource(forKey:fallback:)","abstract":"<p>Returns the <code>LDIntegerVariationValue</code> (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDIntegerVariationValue.html\">ObjcLDIntegerVariationValue</a></code>) containing the value and source for the given feature flag. If the flag does not exist, cannot be cast to a NSInteger, or the LDClient is not started, returns the fallback value and <code>LDFlagValueSourceFallback</code> for the source.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)doubleVariationForKey:fallback:":{"name":"doubleVariation(forKey:fallback:)","abstract":"<p>Returns the double variation for the given feature flag. If the flag does not exist, cannot be cast to a double, or the LDClient is not started, returns the fallback value.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)doubleVariationAndSourceForKey:fallback:":{"name":"doubleVariationAndSource(forKey:fallback:)","abstract":"<p>Returns the <code>LDDoubleVariationValue</code> (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDDoubleVariationValue.html\">ObjcLDDoubleVariationValue</a></code>) containing the value and source for the given feature flag. If the flag does not exist, cannot be cast to a double, or the LDClient is not started, returns the fallback value and <code>LDFlagValueSourceFallback</code> for the source.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)stringVariationForKey:fallback:":{"name":"stringVariation(forKey:fallback:)","abstract":"<p>Returns the NSString variation for the given feature flag. If the flag does not exist, cannot be cast to a NSString, or the LDClient is not started, returns the fallback value.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)stringVariationAndSourceForKey:fallback:":{"name":"stringVariationAndSource(forKey:fallback:)","abstract":"<p>Returns the <code>LDStringVariationValue</code> (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDStringVariationValue.html\">ObjcLDStringVariationValue</a></code>) containing the value and source for the given feature flag. If the flag does not exist, cannot be cast to a NSString, or the LDClient is not started, returns the fallback value and <code>LDFlagValueSourceFallback</code> for the source.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)arrayVariationForKey:fallback:":{"name":"arrayVariation(forKey:fallback:)","abstract":"<p>Returns the NSArray variation for the given feature flag. If the flag does not exist, cannot be cast to a NSArray, or the LDClient is not started, returns the fallback value.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)arrayVariationAndSourceForKey:fallback:":{"name":"arrayVariationAndSource(forKey:fallback:)","abstract":"<p>Returns the <code>LDArrayVariationValue</code> (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDArrayVariationValue.html\">ObjcLDArrayVariationValue</a></code>) containing the value and source for the given feature flag. If the flag does not exist, cannot be cast to a NSArray, or the LDClient is not started, returns the fallback value and <code>LDFlagValueSourceFallback</code> for the source.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)dictionaryVariationForKey:fallback:":{"name":"dictionaryVariation(forKey:fallback:)","abstract":"<p>Returns the NSDictionary variation for the given feature flag. If the flag does not exist, cannot be cast to a NSDictionary, or the LDClient is not started, returns the fallback value.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)dictionaryVariationAndSourceForKey:fallback:":{"name":"dictionaryVariationAndSource(forKey:fallback:)","abstract":"<p>Returns the <code>LDDictionaryVariationValue</code> (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDDictionaryVariationValue.html\">ObjcLDDictionaryVariationValue</a></code>) containing the value and source for the given feature flag. If the flag does not exist, cannot be cast to a NSDictionary, or the LDClient is not started, returns the fallback value and <code>LDFlagValueSourceFallback</code> for the source.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/s:12LaunchDarkly12ObjcLDClientC0C24LDBoolChangedFlagHandlera":{"name":"ObjcLDBoolChangedFlagHandler","abstract":"<p>Handler passed to the client app when a BOOL feature flag value changes</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeBool:owner:handler:":{"name":"observeBool(_:owner:handler:)","abstract":"<p>Sets a handler for the specified BOOL flag key executed on the specified owner. If the flag&rsquo;s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values, and old and new flag value source. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDBoolChangedFlag.html\">ObjcLDBoolChangedFlag</a></code> for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeInteger:owner:handler:":{"name":"observeInteger(_:owner:handler:)","abstract":"<p>Sets a handler for the specified NSInteger flag key executed on the specified owner. If the flag&rsquo;s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values, and old and new flag value source. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDIntegerChangedFlag.html\">ObjcLDIntegerChangedFlag</a></code> for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeDouble:owner:handler:":{"name":"observeDouble(_:owner:handler:)","abstract":"<p>Sets a handler for the specified double flag key executed on the specified owner. If the flag&rsquo;s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values, and old and new flag value source. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDDoubleChangedFlag.html\">ObjcLDDoubleChangedFlag</a></code> for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeString:owner:handler:":{"name":"observeString(_:owner:handler:)","abstract":"<p>Sets a handler for the specified NSString flag key executed on the specified owner. If the flag&rsquo;s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values, and old and new flag value source. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDStringChangedFlag.html\">ObjcLDStringChangedFlag</a></code> for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeArray:owner:handler:":{"name":"observeArray(_:owner:handler:)","abstract":"<p>Sets a handler for the specified NSArray flag key executed on the specified owner. If the flag&rsquo;s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values, and old and new flag value source. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDArrayChangedFlag.html\">ObjcLDArrayChangedFlag</a></code> for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeDictionary:owner:handler:":{"name":"observeDictionary(_:owner:handler:)","abstract":"<p>Sets a handler for the specified NSDictionary flag key executed on the specified owner. If the flag&rsquo;s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values, and old and new flag value source. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDDictionaryChangedFlag.html\">ObjcLDDictionaryChangedFlag</a></code> for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeKeys:owner:handler:":{"name":"observeKeys(_:owner:handler:)","abstract":"<p>Sets a handler for the specified flag keys executed on the specified owner. If any observed flag&rsquo;s value changes, executes the handler 1 time, passing in a dictionary of <NSString*, LDChangedFlag*> containing the old and new flag values, and old and new flag value source. See LDChangedFlag (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDChangedFlag.html\">ObjcLDChangedFlag</a></code>) for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeAllKeysWithOwner:handler:":{"name":"observeAllKeys(owner:handler:)","abstract":"<p>Sets a handler for all flag keys executed on the specified owner. If any flag&rsquo;s value changes, executes the handler 1 time, passing in a dictionary of <NSString*, LDChangedFlag*> containing the old and new flag values, and old and new flag value source. See LDChangedFlag (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDChangedFlag.html\">ObjcLDChangedFlag</a></code>) for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeFlagsUnchangedWithOwner:handler:":{"name":"observeFlagsUnchanged(owner:handler:)","abstract":"<p>Sets a handler executed when a flag update leaves the flags unchanged from their previous values.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)stopObservingForOwner:":{"name":"stopObserving(owner:)","abstract":"<p>Removes all observers for the given owner, including a flagsUnchangedObserver</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)setOnServerUnavailable:":{"name":"setOnServerUnavailable(_:)","abstract":"<p>Sets a block called if the client is unable to contact the LaunchDarkly server. Unlike the observer methods, only 1 block can be set at any given time. The SDK keeps a strong reference to the block. Client apps should take care to remove the block prior to deinit on the owner in order to avoid the SDK causing an object to not be destroyed when expected.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)trackEventWithKey:data:":{"name":"trackEvent(key:data:)","abstract":"<p>Adds a custom event to the LDClient event store. A client app can set a tracking event to allow client customized data analysis. Once an app has called <code>trackEvent</code>, the app cannot remove the event from the event store.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)reportEvents":{"name":"reportEvents()","abstract":"<p>Report events to LaunchDarkly servers. While online, the LDClient automatically reports events on the <code>LDConfig.eventFlushInterval</code>, and whenever the client app moves to the background. There should normally not be a need to call reportEvents.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html":{"name":"ObjcLDClient","abstract":"<p>The LDClient is the heart of the SDK, providing client apps running iOS, watchOS, macOS, or tvOS access to LaunchDarkly services. This singleton provides the ability to set a configuration (LDConfig) that controls how the LDClient talks to LaunchDarkly servers, and a user (LDUser) that provides finer control on the feature flag values delivered to LDClient. Once the LDClient has started, it connects to LaunchDarkly&rsquo;s servers to get the feature flag values you set in the Dashboard.</p>"},"Classes/ObjcLDConfig.html":{"name":"ObjcLDConfig","abstract":"<p>Use LDConfig to configure the LDClient. When initialized, a LDConfig contains the default values which can be changed as needed.</p>"},"Classes/ObjcLDUser.html":{"name":"ObjcLDUser","abstract":"<p>LDUser allows clients to collect information about users in order to refine the feature flag values sent to the SDK. For example, the client app may launch with the SDK defined anonymous user. As the user works with the client app, information may be collected as needed and sent to LaunchDarkly. The client app controls the information collected, which LaunchDarkly does not use except as the client directs to refine feature flags. Client apps should follow <a href=\"apple.com/legal/privacy\">Apple&rsquo;s Privacy Policy</a> when collecting user information.</p>"},"LD Protocols.html#/s:12LaunchDarkly22LDFlagValueConvertibleP":{"name":"LDFlagValueConvertible","abstract":"<p>Protocol used by the SDK to limit feature flag types to those representable on LaunchDarkly servers. Client app developers should not need to use this protocol. The protocol is public because <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDClient.html#/s:12LaunchDarkly8LDClientC9variationxSS6forKey_x8fallbacktAA22LDFlagValueConvertibleRzlF\">LDClient.variation(forKey:fallback:)</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDClient.html#/s:12LaunchDarkly8LDClientC18variationAndSourcex_AA011LDFlagValueF0OtSS6forKey_x8fallbacktAA0gH11ConvertibleRzlF\">LDClient.variationAndSource(forKey:fallback:)</a></code> return a type that conforms to this protocol. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/LDFlagValue.html\">LDFlagValue</a></code> for types that LaunchDarkly feature flags can take.</p>"},"Structs/LDChangedFlag.html#/s:12LaunchDarkly13LDChangedFlagV3keySSv":{"name":"key","abstract":"<p>The key of the changed feature flag</p>","parent_name":"LDChangedFlag"},"Structs/LDChangedFlag.html#/s:12LaunchDarkly13LDChangedFlagV8oldValueypSgv":{"name":"oldValue","abstract":"<p>The feature flag&rsquo;s value before the change. The client app will have to convert the oldValue into the expected type.</p>","parent_name":"LDChangedFlag"},"Structs/LDChangedFlag.html#/s:12LaunchDarkly13LDChangedFlagV14oldValueSourceAA06LDFlagfG0OSgv":{"name":"oldValueSource","abstract":"<p>The feature flag value&rsquo;s source before the change</p>","parent_name":"LDChangedFlag"},"Structs/LDChangedFlag.html#/s:12LaunchDarkly13LDChangedFlagV8newValueypSgv":{"name":"newValue","abstract":"<p>The feature flag&rsquo;s value after the change. The client app will have to convert the newValue into the expected type.</p>","parent_name":"LDChangedFlag"},"Structs/LDChangedFlag.html#/s:12LaunchDarkly13LDChangedFlagV14newValueSourceAA06LDFlagfG0OSgv":{"name":"newValueSource","abstract":"<p>The feature flag value&rsquo;s source after the change</p>","parent_name":"LDChangedFlag"},"Structs/LDChangedFlag.html":{"name":"LDChangedFlag","abstract":"<p>Collects the elements of a feature flag that changed as a result of a <code>clientstream</code> update or feature flag request. The SDK will pass a LDChangedFlag or a collection of LDChangedFlags into feature flag observer closures. The client app will have to convert the old/newValue into the expected type. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDClient.html#/s:12LaunchDarkly8LDClientC7observeySS3key_yXl5owneryAA13LDChangedFlagVc7handlertF\">LDClient.observe(key:owner:handler:)</a></code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDClient.html#/s:12LaunchDarkly8LDClientC7observeySaySSG4keys_yXl5ownerys10DictionaryVySSAA13LDChangedFlagVGc7handlertF\">LDClient.observe(keys:owner:handler:)</a></code>, and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDClient.html#/s:12LaunchDarkly8LDClientC10observeAllyyXl5owner_ys10DictionaryVySSAA13LDChangedFlagVGc7handlertF\">LDClient.observeAll(owner:handler:)</a></code> for more details.</p>"},"Flag Changes.html#/s:12LaunchDarkly17LDFlagChangeOwnera":{"name":"LDFlagChangeOwner","abstract":"<p>An object can own the change observer for as long as the object exists. Swift structs and enums cannot be change observer owners.</p>"},"Flag Changes.html#/s:12LaunchDarkly19LDFlagChangeHandlera":{"name":"LDFlagChangeHandler","abstract":"<p>A closure used to notify a flag change owner of a change to a single feature flag&rsquo;s value.</p>"},"Flag Changes.html#/s:12LaunchDarkly29LDFlagCollectionChangeHandlera":{"name":"LDFlagCollectionChangeHandler","abstract":"<p>A closure used to notify a flag change owner of a change to the feature flags in a collection of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDChangedFlag.html\">LDChangedFlag</a></code>.</p>"},"Flag Changes.html#/s:12LaunchDarkly23LDFlagsUnchangedHandlera":{"name":"LDFlagsUnchangedHandler","abstract":"<p>A closure used to notify a flag change owner that a feature flag request resulted in no changes to any feature flag.</p>"},"Enums/LDFlagValue.html#/s:12LaunchDarkly11LDFlagValueO4boolACSbcACmF":{"name":"bool","abstract":"<p>Bool flag value</p>","parent_name":"LDFlagValue"},"Enums/LDFlagValue.html#/s:12LaunchDarkly11LDFlagValueO3intACSicACmF":{"name":"int","abstract":"<p>Int flag value</p>","parent_name":"LDFlagValue"},"Enums/LDFlagValue.html#/s:12LaunchDarkly11LDFlagValueO6doubleACSdcACmF":{"name":"double","abstract":"<p>Double flag value</p>","parent_name":"LDFlagValue"},"Enums/LDFlagValue.html#/s:12LaunchDarkly11LDFlagValueO6stringACSScACmF":{"name":"string","abstract":"<p>String flag value</p>","parent_name":"LDFlagValue"},"Enums/LDFlagValue.html#/s:12LaunchDarkly11LDFlagValueO5arrayACSayACGcACmF":{"name":"array","abstract":"<p>Array flag value</p>","parent_name":"LDFlagValue"},"Enums/LDFlagValue.html#/s:12LaunchDarkly11LDFlagValueO10dictionaryACs10DictionaryVySSACGcACmF":{"name":"dictionary","abstract":"<p>Dictionary flag value</p>","parent_name":"LDFlagValue"},"Enums/LDFlagValue.html#/s:12LaunchDarkly11LDFlagValueO4nullA2CmF":{"name":"null","abstract":"<p>Null flag value</p>","parent_name":"LDFlagValue"},"Enums/LDFlagValue.html#/s:s9EquatableP2eeoiSbx_xtFZ":{"name":"==(_:_:)","parent_name":"LDFlagValue"},"Enums/LDFlagValueSource.html#/s:12LaunchDarkly17LDFlagValueSourceO6serverA2CmF":{"name":"server","abstract":"<p>Feature flag comes from the server, either the <code>clientstream</code> or a feature flag request</p>","parent_name":"LDFlagValueSource"},"Enums/LDFlagValueSource.html#/s:12LaunchDarkly17LDFlagValueSourceO5cacheA2CmF":{"name":"cache","abstract":"<p>Feature flag comes from the cache. Cached feature flags are used on app launch until the SDK gets the first feature flag update</p>","parent_name":"LDFlagValueSource"},"Enums/LDFlagValueSource.html#/s:12LaunchDarkly17LDFlagValueSourceO8fallbackA2CmF":{"name":"fallback","abstract":"<p>Feature flag comes from the client provided fallback. The SDK will serve fallback values when the flag key is not found, or when the SDK cannot convert the feature flag to the client provided type. Since the client provides this value in the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDClient.html#/s:12LaunchDarkly8LDClientC18variationAndSourcex_AA011LDFlagValueF0OtSS6forKey_x8fallbacktAA0gH11ConvertibleRzlF\">LDClient.variationAndSource(forKey:fallback:)</a></code>, an LDChangedFlag will not contain a <code>fallback</code> valueSource</p>","parent_name":"LDFlagValueSource"},"Enums/LDStreamingMode.html#/s:12LaunchDarkly15LDStreamingModeO9streamingA2CmF":{"name":"streaming","abstract":"<p>In streaming mode, the LDClient opens a long-running connection to LaunchDarkly&rsquo;s streaming server (called <em>clientstream</em>). When a flag value changes on the server, the clientstream notifies the SDK to update the value. Streaming mode is not available on watchOS. On iOS and tvOS, the client app must be running in the foreground to connect to clientstream. On macOS the client app may run in either foreground or background to connect to clientstream. If streaming mode is not available, the SDK reverts to polling mode.</p>","parent_name":"LDStreamingMode"},"Enums/LDStreamingMode.html#/s:12LaunchDarkly15LDStreamingModeO7pollingA2CmF":{"name":"polling","abstract":"<p>In polling mode, the LDClient requests feature flags from LaunchDarkly&rsquo;s app server at regular intervals defined in the LDConfig. When a flag value changes on the server, the LDClient will learn of the change the next time the SDK requests feature flags.</p>","parent_name":"LDStreamingMode"},"Enums/LDStreamingMode.html":{"name":"LDStreamingMode","abstract":"<p>Defines the connection modes available to set into LDClient</p>"},"Enums/LDFlagValueSource.html":{"name":"LDFlagValueSource","abstract":"<p>Defines the sources for feature flag values."},"Enums/LDFlagValue.html":{"name":"LDFlagValue","abstract":"<p>Defines the types and values of a feature flag. The SDK limits feature flags to these types by use of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbLD Protocols.html#/s:12LaunchDarkly22LDFlagValueConvertibleP\">LDFlagValueConvertible</a></code> protocol, which uses this type. Client app developers should not construct an LDFlagValue.</p>"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO3keyA2EmF":{"name":"key","abstract":"<p>Key names match the corresponding LDUser property</p>","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO4nameA2EmF":{"name":"name","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO9firstNameA2EmF":{"name":"firstName","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO8lastNameA2EmF":{"name":"lastName","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO7countryA2EmF":{"name":"country","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO9ipAddressA2EmF":{"name":"ipAddress","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO5emailA2EmF":{"name":"email","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO6avatarA2EmF":{"name":"avatar","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO6customA2EmF":{"name":"custom","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO11isAnonymousA2EmF":{"name":"isAnonymous","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO6deviceA2EmF":{"name":"device","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO15operatingSystemA2EmF":{"name":"operatingSystem","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO11lastUpdatedA2EmF":{"name":"lastUpdated","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO6configA2EmF":{"name":"config","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO17privateAttributesA2EmF":{"name":"privateAttributes","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html":{"name":"CodingKeys","abstract":"<p>String keys associated with LDUser properties</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV22privatizableAttributesSaySSGvZ":{"name":"privatizableAttributes","abstract":"<p>LDUser attributes that can be marked private.</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV3keySSv":{"name":"key","abstract":"<p>Client app defined string that uniquely identifies the user. If the client app does not define a key, the SDK will assign an identifier associated with the anonymous user. The key cannot be made private.</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV4nameSSSgv":{"name":"name","abstract":"<p>Client app defined name for the user. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV9firstNameSSSgv":{"name":"firstName","abstract":"<p>Client app defined first name for the user. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV8lastNameSSSgv":{"name":"lastName","abstract":"<p>Client app defined last name for the user. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV7countrySSSgv":{"name":"country","abstract":"<p>Client app defined country for the user. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV9ipAddressSSSgv":{"name":"ipAddress","abstract":"<p>Client app defined ipAddress for the user. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV5emailSSSgv":{"name":"email","abstract":"<p>Client app defined email address for the user. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV6avatarSSSgv":{"name":"avatar","abstract":"<p>Client app defined avatar for the user. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV6customs10DictionaryVySSypGSgv":{"name":"custom","abstract":"<p>Client app defined dictionary for the user. The client app may declare top level dictionary items as private. If the client app defines custom as private, the SDK considers the dictionary private except for device &amp; operatingSystem (which cannot be made private). See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV17privateAttributesSaySSGSgv\">privateAttributes</a></code> for details. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV11isAnonymousSbv":{"name":"isAnonymous","abstract":"<p>Client app defined isAnonymous for the user. If the client app does not define isAnonymous, the SDK will use the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV3keySSv\">key</a></code> to set this attribute. isAnonymous cannot be made private. (Default: true)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV6deviceSSSgv":{"name":"device","abstract":"<p>Client app defined device for the user. The SDK will determine the device automatically, however the client app can override the value. The SDK will insert the device into the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV6customs10DictionaryVySSypGSgv\">custom</a></code> dictionary. The device cannot be made private. (Default: the system identified device)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV15operatingSystemSSSgv":{"name":"operatingSystem","abstract":"<p>Client app defined operatingSystem for the user. The SDK will determine the operatingSystem automatically, however the client app can override the value. The SDK will insert the operatingSystem into the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV6customs10DictionaryVySSypGSgv\">custom</a></code> dictionary. The operatingSystem cannot be made private. (Default: the system identified operating system)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV17privateAttributesSaySSGSgv":{"name":"privateAttributes","abstract":"<p>Client app defined privateAttributes for the user.</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserVACSSSg3key_AD4nameAD9firstNameAD04lastG0AD7countryAD9ipAddressAD5emailAD6avatars10DictionaryVySSypGSg6customSbSg11isAnonymousAD6deviceAD15operatingSystemSaySSGSg17privateAttributestcfc":{"name":"init(key:name:firstName:lastName:country:ipAddress:email:avatar:custom:isAnonymous:device:operatingSystem:privateAttributes:)","abstract":"<p>Initializer to create a LDUser. Client configurable attributes each have an optional parameter to facilitate setting user information into the LDUser. The SDK will automatically set <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV3keySSv\">key</a></code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV6deviceSSSgv\">device</a></code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV15operatingSystemSSSgv\">operatingSystem</a></code>, and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV11isAnonymousSbv\">isAnonymous</a></code> attributes if the client does not provide them. The SDK embeds <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV6deviceSSSgv\">device</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV15operatingSystemSSSgv\">operatingSystem</a></code> into the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV6customs10DictionaryVySSypGSgv\">custom</a></code> dictionary for transmission to LaunchDarkly.</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserVACSgypSg6object_tcfc":{"name":"init(object:)","abstract":"<p>Failable Initializer that takes any object and attempts to create a LDUser from the object. If the object is a [String: Any], constructs the LDUser via <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserVACs10DictionaryVySSypG04userD0_tcfc\">init(userDictionary:)</a></code></p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserVACs10DictionaryVySSypG04userD0_tcfc":{"name":"init(userDictionary:)","abstract":"<p>Initializer that takes a [String: Any] and creates a LDUser from the contents. Uses any keys present to define corresponding attribute values. Initializes attributes not present in the dictionary to their default value. Attempts to set <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV6deviceSSSgv\">device</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV15operatingSystemSSSgv\">operatingSystem</a></code> from corresponding values embedded in <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV6customs10DictionaryVySSypGSgv\">custom</a></code>. Attempts to set feature flags from values set in <code>config</code>.</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV2eeoiSbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Compares users by comparing their user keys only, to allow the client app to collect user information over time</p>","parent_name":"LDUser"},"Structs/LDConfig/Minima.html#/s:12LaunchDarkly8LDConfigV6MinimaV21pollingIntervalMillisSiv":{"name":"pollingIntervalMillis","abstract":"<p>The minimum interval between feature flag requests in milliseconds. Used only for polling mode. (5 minutes)</p>","parent_name":"Minima"},"Structs/LDConfig/Minima.html#/s:12LaunchDarkly8LDConfigV6MinimaV28backgroundPollIntervalMillisSiv":{"name":"backgroundPollIntervalMillis","abstract":"<p>The minimum interval between feature flag requests while running in the background, in milliseconds. Used only for polling mode. (15 minutes)</p>","parent_name":"Minima"},"Structs/LDConfig/Minima.html":{"name":"Minima","abstract":"<p>The minimum values allowed to be set into LDConfig</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV7baseUrl10Foundation3URLVv":{"name":"baseUrl","abstract":"<p>The url for making feature flag requests. Do not change unless instructed by LaunchDarkly.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV9eventsUrl10Foundation3URLVv":{"name":"eventsUrl","abstract":"<p>The url for making event reports. Do not change unless instructed by LaunchDarkly.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV9streamUrl10Foundation3URLVv":{"name":"streamUrl","abstract":"<p>The url for connecting to the <em>clientstream</em>. Do not change unless instructed by LaunchDarkly.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV13eventCapacitySiv":{"name":"eventCapacity","abstract":"<p>The maximum number of analytics events the LDClient can store. When the LDClient event store reaches the eventCapacity, the SDK discards events until it successfully reports them to LaunchDarkly. (Default: 100)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV23connectionTimeoutMillisSiv":{"name":"connectionTimeoutMillis","abstract":"<p>The timeout interval in milliseconds for flag requests and event reports. (Default: 10 seconds)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV24eventFlushIntervalMillisSiv":{"name":"eventFlushIntervalMillis","abstract":"<p>The interval between event reports in milliseconds (Default: 30 seconds)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV18pollIntervalMillisSiv":{"name":"pollIntervalMillis","abstract":"<p>The interval between feature flag requests in milliseconds. Used only for polling mode. (Default: 5 minutes)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV28backgroundPollIntervalMillisSiv":{"name":"backgroundPollIntervalMillis","abstract":"<p>The interval between feature flag requests while running in the background, in milliseconds. Used only for polling mode. (Default: 60 minutes)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV13streamingModeAA011LDStreamingE0Ov":{"name":"streamingMode","abstract":"<p>Controls the method the SDK uses to keep feature flags updated. When set to .streaming, connects to <code>clientstream</code> which notifies the SDK of feature flag changes. When set to .polling, an efficient polling mechanism is used to periodically request feature flag values. Ignored for watchOS, which always uses .polling. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/LDStreamingMode.html\">LDStreamingMode</a></code> for more details. (Default: .streaming)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV23enableBackgroundUpdatesSbv":{"name":"enableBackgroundUpdates","abstract":"<p>Enables feature flag updates when your app is in the background. Allowed on macOS only. (Default: false)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV11startOnlineSbv":{"name":"startOnline","abstract":"<p>Controls LDClient start behavior. When true, calling start causes LDClient to go online. When false, calling start causes LDClient to remain offline. If offline at start, set the client online to receive flag updates. (Default: true)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV24allUserAttributesPrivateSbv":{"name":"allUserAttributesPrivate","abstract":"<p>Treat all user attributes as private for event reporting for all users.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV21privateUserAttributesSaySSGSgv":{"name":"privateUserAttributes","abstract":"<p>User attributes and top level custom dictionary keys to treat as private for event reporting for all users.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV9useReportSbv":{"name":"useReport","abstract":"<p>Directs the SDK to use REPORT for HTTP requests to connect to <code>clientstream</code> and make feature flag requests. When false the SDK uses GET for these requests. Do not use unless advised by LaunchDarkly. (Default: false)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV18inlineUserInEventsSbv":{"name":"inlineUserInEvents","abstract":"<p>Controls how the SDK reports the user in analytics event reports. When set to true, event reports will contain the user attributes, except attributes marked as private. When set to false, event reports will contain the user&rsquo;s key only, reducing the size of event reports. (Default: false)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV11isDebugModeSbv":{"name":"isDebugMode","abstract":"<p>Enables logging for debugging. (Default: false)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV6minimaAC6MinimaVv":{"name":"minima","abstract":"<p>LaunchDarkly defined minima for selected configurable items</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigVACycfc":{"name":"init()","abstract":"<p>LDConfig constructor. Configurable values are all set to their default values. The client app can modify these values as desired. Note that client app developers may prefer to get the LDConfig from <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDClient.html#/s:12LaunchDarkly8LDClientC6configAA8LDConfigVv\">LDClient.config</a></code> in order to retain previously set values.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV2eeoiSbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Compares the settable properties in 2 LDConfig structs</p>","parent_name":"LDConfig"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC6sharedACvZ":{"name":"shared","abstract":"<p>Access to the LDClient singleton. For iOS apps with watchOS companion apps, there will be a singleton on each platform. These singletons do not communicate with each other. If you try to share feature flags between apps, the latest flag values may be overwritten by old feature flags from the other platform. LaunchDarkly recommends not sharing feature flags between apps and allowing each LDClient to manage feature flags on its own platform. If you share feature flag data between apps, provide a way to prevent the LDClients from overwriting new feature flags with old feature flags in the shared data.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC8isOnlineSbv":{"name":"isOnline","abstract":"<p>Reports the online/offline state of the LDClient.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC9setOnlineySb_yycSg10completiontF":{"name":"setOnline(_:completion:)","abstract":"<p>Set the LDClient online/offline.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC6configAA8LDConfigVv":{"name":"config","abstract":"<p>The LDConfig that configures the LDClient. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDConfig.html\">LDConfig</a></code> for details about what can be configured.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC4userAA6LDUserVv":{"name":"user","abstract":"<p>The LDUser set into the LDClient may affect the set of feature flags returned by the LaunchDarkly server, and ties event tracking to the user. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html\">LDUser</a></code> for details about what information can be retained.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC5startySS9mobileKey_AA8LDConfigVSg6configAA6LDUserVSg4useryycSg10completiontF":{"name":"start(mobileKey:config:user:completion:)","abstract":"<p>Starts the LDClient using the passed in <code>mobileKey</code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDClient.html#/s:12LaunchDarkly8LDClientC6configAA8LDConfigVv\">config</a></code>, &amp; <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDClient.html#/s:12LaunchDarkly8LDClientC4userAA6LDUserVv\">user</a></code>. Call this before requesting feature flag values. The LDClient will not go online until you call this method.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC4stopyyF":{"name":"stop()","abstract":"<p>Stops the LDClient. Stopping the client means the LDClient goes offline and stops recording events. LDClient will no longer provide feature flag values, only returning fallback values.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC9variationxSS6forKey_x8fallbacktAA22LDFlagValueConvertibleRzlF":{"name":"variation(forKey:fallback:)","abstract":"<p>Returns the variation for the given feature flag. If the flag does not exist, cannot be cast to the correct return type, or the LDClient is not started, returns the fallback value.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC18variationAndSourcex_AA011LDFlagValueF0OtSS6forKey_x8fallbacktAA0gH11ConvertibleRzlF":{"name":"variationAndSource(forKey:fallback:)","abstract":"<p>Returns the variation and source for the given feature flag as a tuple. If the flag does not exist, cannot be cast to the correct return type, or the LDClient is not started, returns the fallback value and <code>.fallback</code> for the source.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC7observeySS3key_yXl5owneryAA13LDChangedFlagVc7handlertF":{"name":"observe(key:owner:handler:)","abstract":"<p>Sets a handler for the specified flag key executed on the specified owner. If the flag&rsquo;s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values, and old and new flag value source. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDChangedFlag.html\">LDChangedFlag</a></code> for details.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC7observeySaySSG4keys_yXl5ownerys10DictionaryVySSAA13LDChangedFlagVGc7handlertF":{"name":"observe(keys:owner:handler:)","abstract":"<p>Sets a handler for the specified flag keys executed on the specified owner. If any observed flag&rsquo;s value changes, executes the handler 1 time, passing in a dictionary of [LDFlagKey: LDChangedFlag] containing the old and new flag values, and old and new flag value source. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDChangedFlag.html\">LDChangedFlag</a></code> for details.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC10observeAllyyXl5owner_ys10DictionaryVySSAA13LDChangedFlagVGc7handlertF":{"name":"observeAll(owner:handler:)","abstract":"<p>Sets a handler for all flag keys executed on the specified owner. If any flag&rsquo;s value changes, executes the handler 1 time, passing in a dictionary of [LDFlagKey: LDChangedFlag] containing the old and new flag values, and old and new flag value source. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDChangedFlag.html\">LDChangedFlag</a></code> for details.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC21observeFlagsUnchangedyyXl5owner_yyc7handlertF":{"name":"observeFlagsUnchanged(owner:handler:)","abstract":"<p>Sets a handler executed when a flag update leaves the flags unchanged from their previous values.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC13stopObservingyyXl5owner_tF":{"name":"stopObserving(owner:)","abstract":"<p>Removes all observers for the given owner, including the flagsUnchangedObserver</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC19onServerUnavailableyycSgv":{"name":"onServerUnavailable","abstract":"<p>Sets a closure called if the client is unable to contact the LaunchDarkly server. Unlike the observers, only 1 closure can be set at any given time. The SDK keeps a strong reference to the closure. Client apps should take care to remove the closure prior to deinit on the owner in order to avoid the SDK causing an object to not be destroyed when expected.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC10trackEventySS3key_s10DictionaryVySSypGSg4datatF":{"name":"trackEvent(key:data:)","abstract":"<p>Adds a custom event to the LDClient event store. A client app can set a tracking event to allow client customized data analysis. Once an app has called <code>trackEvent</code>, the app cannot remove the event from the event store.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC12reportEventsyyF":{"name":"reportEvents()","abstract":"<p>Report events to LaunchDarkly servers. While online, the LDClient automatically reports events on the <code>LDConfig.eventFlushInterval</code>, and whenever the client app moves to the background. There should normally not be a need to call reportEvents.</p>","parent_name":"LDClient"},"Classes/LDClient.html":{"name":"LDClient","abstract":"<p>The LDClient is the heart of the SDK, providing client apps running iOS, watchOS, macOS, or tvOS access to LaunchDarkly services. This singleton provides the ability to set a configuration (LDConfig) that controls how the LDClient talks to LaunchDarkly servers, and a user (LDUser) that provides finer control on the feature flag values delivered to LDClient. Once the LDClient has started, it connects to LaunchDarkly&rsquo;s servers to get the feature flag values you set in the Dashboard.</p>"},"Structs/LDConfig.html":{"name":"LDConfig","abstract":"<p>Use LDConfig to configure the LDClient. When initialized, a LDConfig contains the default values which can be changed as needed.</p>"},"Structs/LDUser.html":{"name":"LDUser","abstract":"<p>LDUser allows clients to collect information about users in order to refine the feature flag values sent to the SDK. For example, the client app may launch with the SDK defined anonymous user. As the user works with the client app, information may be collected as needed and sent to LaunchDarkly. The client app controls the information collected, which LaunchDarkly does not use except as the client directs to refine feature flags. Client apps should follow <a href=\"apple.com/legal/privacy\">Apple&rsquo;s Privacy Policy</a> when collecting user information.</p>"},"Launch Darkly.html#/s:12LaunchDarkly9LDFlagKeya":{"name":"LDFlagKey","abstract":"<p>The feature flag key is a String. This typealias helps define where the SDK expects the string to be a feature flag key.</p>"},"Launch Darkly.html":{"name":"Launch Darkly"},"Enumerations.html":{"name":"Enumerations"},"Flag Changes.html":{"name":"Flag Changes"},"LD Protocols.html":{"name":"LD Protocols"},"Objective-C.html":{"name":"Objective-C"},"Obj-C Enumerations.html":{"name":"Obj-C Enumerations"},"Obj-C Variation Values.html":{"name":"Obj-C Variation Values"},"Obj-C Changed Flags.html":{"name":"Obj-C Changed Flags"}}